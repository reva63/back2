openapi: 3.0.0
info:
    title: KARDO 8 API
    version: 1.0.0
servers:
    - url: /api
tags:
    - name: Applications
      description: Operations related to applications
    - name: Profiles
      description: Operations related to profiles
paths:
    /applications:
        get:
            tags:
                - Applications
            summary: List all applications
            responses:
                '200':
                    description: A list of applications
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/ApplicationResponse'
        post:
            tags:
                - Applications
            summary: Create a new application
            requestBody:
                required: true
                content:
                    multipart/form-data:
                        schema:
                            type: object
                            properties:
                                files:
                                    type: array
                                    items:
                                        type: string
                                        format: binary
                                data:
                                    $ref: '#/components/schemas/StoreApplicationBody'
                        encoding:
                            files:
                                contentType: application/octet-stream
            responses:
                '201':
                    description: Application created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ApplicationResponse'
    /applications/{application}:
        get:
            tags:
                - Applications
            summary: Retrieve a specific application or null
            parameters:
                - name: application
                  in: path
                  required: true
                  description: The ID of the application to retrieve.
                  schema:
                      type: string
            responses:
                '200':
                    description: Application details retrieved successfully.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ApplicationResponse'
        delete:
            tags:
                - Applications
            summary: Remove an existing application
            parameters:
                - name: application
                  in: path
                  required: true
                  description: The ID of the application to delete.
                  schema:
                      type: string
            responses:
                '204':
                    description: Application deleted successfully.
                '404':
                    description: Application not found.
    /profiles:
        get:
            tags:
                - Profiles
            summary: List all profiles
            operationId: listProfiles
            responses:
                '200':
                    description: A list of profiles
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/ProfileResponse'
        post:
            tags:
                - Profiles
            summary: Create a new profile
            operationId: createProfile
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StoreProfileBody'
            responses:
                '201':
                    description: Profile created successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProfileResponse'
    /profiles/{profile}:
        get:
            tags:
                - Profiles
            summary: Get a specific profile by ID
            operationId: getProfileById
            parameters:
                - name: profile
                  in: path
                  required: true
                  description: The ID of the profile to retrieve.
                  schema:
                      type: string
            responses:
                '200':
                    description: A single profile object.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProfileResponse'
                '404':
                    description: Profile not found
        patch:
            tags:
                - Profiles
            summary: Update a specific profile by ID
            operationId: updateProfileById
            parameters:
                - name: profile
                  in: path
                  required: true
                  description: The ID of the profile to update.
                  schema:
                      type: string
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateProfileBody'
            responses:
                '200':
                    description: Profile updated successfully
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ProfileResponse'
                '404':
                    description: Profile not found
        delete:
            tags:
                - Profiles
            summary: Delete a specific profile by ID
            operationId: deleteProfileById
            parameters:
                - name: profile
                  in: path
                  required: true
                  description: The ID of the profile to delete.
                  schema:
                      type: string
            responses:
                '200':
                    description: Profile deleted successfully
                '404':
                    description: Profile not found
components:
    schemas:
        ApplicationResponse:
            type: object
            properties:
                id:
                    type: integer
                createdAt:
                    type: string
                    format: date-time
                editedAt:
                    type: string
                    format: date-time
                deletedAt:
                    type: string
                    format: date-time
                    nullable: true
                attributes:
                    type: array
                    items:
                        $ref: '#/components/schemas/AttributeResponse'
                applicant:
                    type: integer
                    description: Applicant ID
                contest:
                    type: integer
                    description: Contest ID
                directions:
                    type: array
                    description: Direction IDs
                    items:
                        type: integer
                categories:
                    type: array
                    description: Category IDs
                    items:
                        type: integer
        StoreApplicationBody:
            type: object
            properties:
                user:
                    type: integer
                    description: User ID. Should be passed via authentication. This is temporary.
                contest:
                    type: integer
                categories:
                    type: array
                    items:
                        type: integer
                    minItems: 1
                directions:
                    type: array
                    items:
                        type: integer
                    minItems: 1
                profileData:
                    $ref: '#/components/schemas/ProfileData'
                socialData:
                    type: array
                    items:
                        $ref: '#/components/schemas/SocialData'
            required:
                - contest
                - categories
                - directions
                - profileData
                - socialData
        ProfileResponse:
            type: object
            properties:
                id:
                    type: integer
                firstName:
                    type: string
                lastName:
                    type: string
                middleName:
                    type: string
                gender:
                    type: string
                    enum:
                        - male
                        - female
                dateOfBirth:
                    type: string
                    format: date
                citizenship:
                    type: string
                country:
                    type: string
                region:
                    type: string
                city:
                    type: string
                email:
                    type: string
                    format: email
                phone:
                    type: string
                userId:
                    type: integer
                attributes:
                    type: array
                    items:
                        $ref: '#/components/schemas/AttributeResponse'
        StoreProfileBody:
            type: object
            properties:
                user:
                    type: integer
                    description: User ID. Should be passed via authentication. This is temporary.
                firstName:
                    type: string
                lastName:
                    type: string
                middleName:
                    type: string
                gender:
                    type: string
                    enum:
                        - male
                        - female
                dateOfBirth:
                    type: string
                    format: date
                citizenship:
                    type: string
                country:
                    type: string
                region:
                    type: string
                city:
                    type: string
                email:
                    type: string
                    format: email
                phone:
                    type: string
                upsertAttributes:
                    type: array
                    description: Save or update attributes
                    minItems: 1
                    items:
                        $ref: '#/components/schemas/ProfileAttributeData'
            required:
                - firstName
                - lastName
                - middleName
                - gender
                - dateOfBirth
                - citizenship
                - country
                - region
                - city
                - email
                - phone
        UpdateProfileBody:
            type: object
            properties:
                firstName:
                    type: string
                lastName:
                    type: string
                middleName:
                    type: string
                citizenship:
                    type: string
                country:
                    type: string
                region:
                    type: string
                city:
                    type: string
                email:
                    type: string
                    format: email
                phone:
                    type: string
                upsertAttributes:
                    type: array
                    description: Save or update attributes
                    items:
                        $ref: '#/components/schemas/ProfileAttributeData'
                removeAttributes:
                    type: array
                    description: Remove attributes by IDs
                    items:
                        type: integer
        ProfileData:
            type: object
            properties:
                lastName:
                    type: string
                firstName:
                    type: string
                middleName:
                    type: string
                    nullable: true
                gender:
                    type: string
                    enum:
                        - male
                        - female
                dateOfBirth:
                    type: string
                    format: date-time
                citizenship:
                    type: string
                country:
                    type: string
                region:
                    type: string
                city:
                    type: string
                email:
                    type: string
                    format: email
                phone:
                    type: string
            required:
                - lastName
                - firstName
                - middleName
                - gender
                - dateOfBirth
                - citizenship
                - country
                - region
                - city
                - email
                - phone
        ProfileAttributeData:
            type: object
            properties:
                id:
                    type: integer
                    nullable: true
                    description: required on update
                type:
                    $ref: '#/components/schemas/AttributeTypes'
                name:
                    type: string
                value:
                    type: string
            required:
                - id
                - type
                - name
                - value
        AttributeResponse:
            type: object
            properties:
                id:
                    type: integer
                    nullable: true
                type:
                    $ref: '#/components/schemas/AttributeTypes'
                key:
                    type: string
                value:
                    type: string
        SocialData:
            type: object
            properties:
                type:
                    $ref: '#/components/schemas/SocialTypes'
                link:
                    type: string
                    format: uri
        SocialTypes:
            type: string
            enum:
                - telegram
                - vk
                - youtube
                - rutube
                - other
        AttributeTypes:
            type: string
            enum:
                - profile
                - social
